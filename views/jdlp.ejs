<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/matter-js@0.18.0/build/matter.min.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        #canvas-container {
            position: absolute;
            width: 100vw;
            height: 100vh;
        }
    </style>
    <title>Physics Simulation</title>
</head>
<body>
    <div id="canvas-container"></div>

    <script>
        const { Engine, Render, Bodies, World } = Matter;

        const engine = Engine.create();
        const render = Render.create({
            element: document.getElementById('canvas-container'),
            engine: engine,
            options: {
                width: window.innerWidth,
                height: window.innerHeight,
                wireframes: false
            }
        });

        const ground = Bodies.rectangle(
            window.innerWidth / 2,
            window.innerHeight - 20,
            window.innerWidth,
            40,
            { isStatic: true }
        );

        World.add(engine.world, [ground]);

        document.addEventListener('click', (event) => {
            const ball = Bodies.circle(
                event.clientX,
                event.clientY,
                20
            );
            World.add(engine.world, [ball]);
        });

        document.addEventListener('touchstart', (event) => {
            const touch = event.touches[0];
            const ball = Bodies.circle(
                touch.clientX,
                touch.clientY,
                20
            );
            World.add(engine.world, [ball]);
        });

        // Ajout de barrières pour les côtés du rectangle
        const leftWall = Bodies.rectangle(0, window.innerHeight / 2, 20, window.innerHeight, { isStatic: true });
        const rightWall = Bodies.rectangle(window.innerWidth, window.innerHeight / 2, 20, window.innerHeight, { isStatic: true });

        World.add(engine.world, [leftWall, rightWall]);

        // Correction pour empêcher deux boules d'apparaître sur mobile
        engine.world.gravity.y = 0;

        // Ajustement de la taille du rendu lors du redimensionnement
        window.addEventListener('resize', () => {
            Render.canvas.width = window.innerWidth;
            Render.canvas.height = window.innerHeight;
            Render.options.width = window.innerWidth;
            Render.options.height = window.innerHeight;

            Matter.Bounds.update(engine.world.bounds, {
                min: { x: 0, y: 0 },
                max: { x: window.innerWidth, y: window.innerHeight }
            });

            if (engine.render.canvas) {
                engine.render.canvas.width = engine.render.options.width;
                engine.render.canvas.height = engine.render.options.height;
            }
            if (engine.render.context) {
                engine.render.context.width = engine.render.options.width;
                engine.render.context.height = engine.render.options.height;
            }

            Matter.Render.lookAt(render, {
                min: { x: 0, y: 0 },
                max: { x: window.innerWidth, y: window.innerHeight }
            });
        });

        Engine.run(engine);
        Render.run(render);
    </script>
</body>
</html>
